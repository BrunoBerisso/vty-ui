
- List: implement a "resizeWindow" function which will adjust the
  visible window size; one might want to size a list widget's visible
  window as a function of terminal height.  This should automatically
  change what is selected if the window size gets smaller than the
  currently selected index.

- Is VBox growthPolicy sane for all content configurations?

- Is the current GrowthPolicy type sufficient?

- Add functions to get access to information about specific widgets
  (attributes, height settings, etc.) so they aren't totally opaque

- Box layout widget documentation so it's clear from the docs how
  widgets get laid out

- Widgets:

  - Scrollable area (a generalization of the List) which can wrap a
    widget and make it scrollable in a confined space.  To make this
    work, we may need masking support in Vty.  Scrolling is really
    just (top, left, widget, mask window size) where the window size
    depends on available space and top/left positions are modified by
    the application as scrolling requests are received.

  - horizontal / vertical boxes which can take absolute values or
    percentages to determine how to allocate space to their children
    (this may entail re-tooling the existing types to take one of
    various space allocation specifiers).  Maybe something like:

    Size = Absolute Int Int
         | Percent Int
         | Auto
    (Widget a, Widget b) => HBox Size a b

    Sizing policy (Size) determines how a box reserves space for each
    of its two children.  Percent a implies (100-a) percent space
    allocated for one child.  Absolute a b implies a rows or columns
    for the "first" child and b rows or columns for the "second"
    child.  Auto implies that the box may grow to accomodate the size
    of its children.

    Growth policy of boxes based on size policy:

    growthPolicy Auto = Grow(Vertical|Horizontal)
    growthPolicy (Percent _) = Grow(Vertical|Horizontal)
    growthPolicy (Absolute _ _) = Static

    A box can grow to fill available space if its children do not have
    a fixed size.  Currently that is already expressed by letting the
    most restrictive child growth policy propagate to the parent box
    container.

  - Is there a need to distinguish between GrowHorizontal and
    GrowVertical?  Need to distinguish clearly between "size that the
    user can control" and "policy for how to use available space".
    Part of the problem with unifying these is that sometimes you can
    know prior to rendering how much space you will need to consume;
    in other cases, you need to wait until rendering has occurred and
    measure the size of the resulting image.

  - HBox / VBox compositions which have styled borders in between
    their children (absolutely-sized children of boxes will make this
    trivial)